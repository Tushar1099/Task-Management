package com.casestudy.formservice.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.casestudy.formservice.dto.FormDto;
import com.casestudy.formservice.service.FormService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/form")
@CrossOrigin("http://localhost:3000")
public class FormController {

	@Autowired
	private FormService formService;

	@GetMapping("/")
	public ResponseEntity<byte[]> createExcel() throws IOException {

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Sheet1");

		Row headerRow = sheet.createRow(0);
		Cell headerCell1 = headerRow.createCell(0);
		headerCell1.setCellValue("Name");

		Cell headerCell2 = headerRow.createCell(1);
		headerCell2.setCellValue("Age");

		// Add data rows
		Row dataRow1 = sheet.createRow(1);
		Cell dataCell1 = dataRow1.createCell(0);
		dataCell1.setCellValue("John");

		Cell dataCell2 = dataRow1.createCell(1);
		dataCell2.setCellValue(25);

		Row dataRow2 = sheet.createRow(2);
		Cell dataCell3 = dataRow2.createCell(0);
		dataCell3.setCellValue("Alice");

		Cell dataCell4 = dataRow2.createCell(1);
		dataCell4.setCellValue(30);
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		workbook.write(outputStream);
		workbook.close();
		byte[] excelContent = outputStream.toByteArray();
		HttpHeaders headers = new HttpHeaders();
		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=example.xlsx");
		return ResponseEntity.ok().headers(headers).body(excelContent);
	}

	@PostMapping
	public ResponseEntity<FormDto> createForm(@RequestBody FormDto formDto) {
		FormDto savedForm = formService.createForm(formDto);
		return new ResponseEntity<>(savedForm, HttpStatus.CREATED);
	}

	@GetMapping("/getByFormId/{id}")
	public ResponseEntity<FormDto> getFormByFormId(@PathVariable("id") Long formId) {
		FormDto foundForm = formService.getByFormId(formId);
		return new ResponseEntity<>(foundForm, HttpStatus.OK);
	}

	@GetMapping("/getByUserId/{id}")
	public ResponseEntity<FormDto> getFormByUserId(@PathVariable("id") Long userId) {
		FormDto foundUser = formService.getByUserId(userId);
		return new ResponseEntity<>(foundUser, HttpStatus.OK);
	}

	@GetMapping("/getAllForms")
	public ResponseEntity<List<FormDto>> getAllForms() {
		List<FormDto> allForms = formService.getAllForms();
		return new ResponseEntity<>(allForms, HttpStatus.OK);
	}
}
